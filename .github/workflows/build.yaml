name: Python application test with Github Actions

on:
  push:
    branches:
      - "*"

env:

  # REGISTRY: ghcr.io → Defines the container registry to be GitHub Container Registry (GHCR).
  REGISTRY: ghcr.io 

  # Uses GitHub’s built-in github.repository variable to dynamically name the Docker image based on the repository name (e.g., owner/repo).
  IMAGE_NAME: ${{ github.repository }} 

jobs:
  build:

    runs-on: ubuntu-latest
    # The workflow runs on an Ubuntu-based GitHub Actions runner.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Login to GitHub registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # This retrieves the Docker image tags generated by the previous docker/metadata-action step.
          tags: ${{ steps.meta.outputs.tags }}
          # This adds metadata labels to the Docker image (e.g., author, description, version)
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 ${{ steps.meta.outputs.tags }}

      - name: Wait for Container to Start
        run: sleep 10  # Adjust as needed, waiting for the container to start

      - name: Test Docker Container
        run: |
          curl http://localhost:8080  # Adjust URL and port based on your application
